<Window
    x:Class="Probel.JsonReader.Presentation.Views.ShellView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:conv="clr-namespace:Probel.JsonReader.Presentation.Converters"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks"
    xmlns:m="clr-namespace:Probel.JsonReader.Presentation.Properties"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:prism="http://prismlibrary.com/"
    Title="{Binding Title}"
    Width="525"
    Height="350"
    prism:ViewModelLocator.AutoWireViewModel="True"
    Icon="/Probel.JsonReader.Presentation;component/Log.ico"
    mc:Ignorable="d">
    <Window.Resources>
        <conv:MinutesFilterToBooleanConverter x:Key="MinutesFilterToBooleanConverter" />
        <conv:InvertBooleanConverter x:Key="InvertBooleanConverter" />
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
        <conv:TextToVisibilityConverter x:Key="TextToVisibilityConverter" />
    </Window.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <Menu>
            <MenuItem Header="{x:Static m:Messages.Menu_File}">
                <MenuItem Click="OnOpenFile" Header="{x:Static m:Messages.Menu_File_Open}" />
                <Separator />
                <MenuItem Click="OnQuit" Header="{x:Static m:Messages.Menu_File_Quit}" />
            </MenuItem>
            <MenuItem Header="{x:Static m:Messages.Menu_Filters}">
                <MenuItem
                    Command="{Binding FilterCommand}"
                    CommandParameter="2"
                    Header="2"
                    HeaderStringFormat="{x:Static m:Messages.MenuItem_FilterMinutes}"
                    IsChecked="{Binding FilterMinutes, Converter={StaticResource MinutesFilterToBooleanConverter}, ConverterParameter=2}" />
                <MenuItem
                    Command="{Binding FilterCommand}"
                    CommandParameter="5"
                    Header="5"
                    HeaderStringFormat="{x:Static m:Messages.MenuItem_FilterMinutes}"
                    IsChecked="{Binding FilterMinutes, Converter={StaticResource MinutesFilterToBooleanConverter}, ConverterParameter=5}" />
                <MenuItem
                    Command="{Binding FilterCommand}"
                    CommandParameter="15"
                    Header="15"
                    HeaderStringFormat="{x:Static m:Messages.MenuItem_FilterMinutes}"
                    IsChecked="{Binding FilterMinutes, Converter={StaticResource MinutesFilterToBooleanConverter}, ConverterParameter=15}" />
                <MenuItem
                    Command="{Binding FilterCommand}"
                    CommandParameter="30"
                    Header="30"
                    HeaderStringFormat="{x:Static m:Messages.MenuItem_FilterMinutes}"
                    IsChecked="{Binding FilterMinutes, Converter={StaticResource MinutesFilterToBooleanConverter}, ConverterParameter=30}" />
                <Separator />
                <MenuItem
                    Command="{Binding FilterCommand}"
                    CommandParameter="60"
                    Header="1"
                    HeaderStringFormat="{x:Static m:Messages.MenuItem_FilterHours}"
                    IsChecked="{Binding FilterMinutes, Converter={StaticResource MinutesFilterToBooleanConverter}, ConverterParameter=60}" />
                <MenuItem
                    Command="{Binding FilterCommand}"
                    CommandParameter="120"
                    Header="2"
                    HeaderStringFormat="{x:Static m:Messages.MenuItem_FilterHours}"
                    IsChecked="{Binding FilterMinutes, Converter={StaticResource MinutesFilterToBooleanConverter}, ConverterParameter=120}" />
                <MenuItem
                    Command="{Binding FilterCommand}"
                    CommandParameter="180"
                    Header="3"
                    HeaderStringFormat="{x:Static m:Messages.MenuItem_FilterHours}"
                    IsChecked="{Binding FilterMinutes, Converter={StaticResource MinutesFilterToBooleanConverter}, ConverterParameter=180}" />
                <MenuItem
                    Command="{Binding FilterCommand}"
                    CommandParameter="240"
                    Header="4"
                    HeaderStringFormat="{x:Static m:Messages.MenuItem_FilterHours}"
                    IsChecked="{Binding FilterMinutes, Converter={StaticResource MinutesFilterToBooleanConverter}, ConverterParameter=240}" />
                <MenuItem
                    Command="{Binding FilterCommand}"
                    CommandParameter="300"
                    Header="5"
                    HeaderStringFormat="{x:Static m:Messages.MenuItem_FilterHours}"
                    IsChecked="{Binding FilterMinutes, Converter={StaticResource MinutesFilterToBooleanConverter}, ConverterParameter=300}" />
                <MenuItem
                    Command="{Binding FilterCommand}"
                    CommandParameter="360"
                    Header="6"
                    HeaderStringFormat="{x:Static m:Messages.MenuItem_FilterHours}"
                    IsChecked="{Binding FilterMinutes, Converter={StaticResource MinutesFilterToBooleanConverter}, ConverterParameter=360}" />
                <MenuItem
                    Command="{Binding FilterCommand}"
                    CommandParameter="720"
                    Header="12"
                    HeaderStringFormat="{x:Static m:Messages.MenuItem_FilterHours}"
                    IsChecked="{Binding FilterMinutes, Converter={StaticResource MinutesFilterToBooleanConverter}, ConverterParameter=720}" />
                <Separator />
                <MenuItem
                    Command="{Binding FilterCommand}"
                    CommandParameter="0"
                    Header="{x:Static m:Messages.MenuItem_NoFilter}"
                    IsChecked="{Binding FilterMinutes, Converter={StaticResource MinutesFilterToBooleanConverter}, ConverterParameter=0}" />
            </MenuItem>
            <MenuItem Header="{x:Static m:Messages.Menu_Order}">
                <MenuItem
                    Click="OnShowColumn"
                    Command="{Binding FilterCommand}"
                    Header="{x:Static m:Messages.Menu_Order_Asc}"
                    IsChecked="{Binding Settings.IsSortAscending}" />
                <MenuItem
                    Click="OnShowColumn"
                    Command="{Binding FilterCommand}"
                    Header="{x:Static m:Messages.Menu_Order_Desc}"
                    IsChecked="{Binding Settings.IsSortAscending, Converter={StaticResource InvertBooleanConverter}}" />
            </MenuItem>
            <MenuItem Header="{x:Static m:Messages.Menu_Columns}">
                <MenuItem
                    x:Name="IsLoggerVisible"
                    Click="OnShowColumn"
                    Header="{x:Static m:Messages.Menu_Columns_Logger}"
                    IsChecked="{Binding Settings.IsLoggerVisible, UpdateSourceTrigger=PropertyChanged}" />
                <MenuItem
                    x:Name="IsThreadIdVisible"
                    Click="OnShowColumn"
                    Header="{x:Static m:Messages.Menu_Columns_ThreadId}"
                    IsChecked="{Binding Settings.IsThreadIdVisible, UpdateSourceTrigger=PropertyChanged}" />
            </MenuItem>
        </Menu>
        <StackPanel Grid.Row="1" Orientation="Horizontal">
            <StackPanel.Resources>
                <Style TargetType="ToggleButton">
                    <Setter Property="Margin" Value="5,5,0,5" />
                </Style>
            </StackPanel.Resources>
            <ToggleButton Command="{Binding FilterCommand}" IsChecked="{Binding Settings.ShowTrace, UpdateSourceTrigger=PropertyChanged}">
                <iconPacks:PackIconModern Kind="Eye" />
            </ToggleButton>
            <ToggleButton Command="{Binding FilterCommand}" IsChecked="{Binding Settings.ShowDebug, UpdateSourceTrigger=PropertyChanged}">
                <iconPacks:PackIconModern Kind="Bug" />
            </ToggleButton>
            <ToggleButton Command="{Binding FilterCommand}" IsChecked="{Binding Settings.ShowInfo, UpdateSourceTrigger=PropertyChanged}">
                <iconPacks:PackIconModern Kind="InformationCircle" />
            </ToggleButton>
            <ToggleButton Command="{Binding FilterCommand}" IsChecked="{Binding Settings.ShowWarning, UpdateSourceTrigger=PropertyChanged}">
                <iconPacks:PackIconModern Kind="Warning" />
            </ToggleButton>
            <ToggleButton Command="{Binding FilterCommand}" IsChecked="{Binding Settings.ShowError, UpdateSourceTrigger=PropertyChanged}">
                <iconPacks:PackIconModern Kind="Stop" />
            </ToggleButton>
            <ToggleButton Command="{Binding FilterCommand}" IsChecked="{Binding Settings.ShowFatal, UpdateSourceTrigger=PropertyChanged}">
                <iconPacks:PackIconModern Kind="SignStop" />
            </ToggleButton>
        </StackPanel>
        <DataGrid
            Grid.Row="2"
            AutoGenerateColumns="False"
            CanUserAddRows="False"
            CanUserReorderColumns="False"
            CanUserResizeRows="False"
            CanUserSortColumns="False"
            GridLinesVisibility="Horizontal"
            ItemsSource="{Binding Logs}"
            SelectionMode="Single" HorizontalGridLinesBrush="#0C000000" VerticalGridLinesBrush="#82000000" IsReadOnly="True">
            <DataGrid.Resources>
                <ResourceDictionary>
                    <Style x:Key="{x:Type DataGridCell}" TargetType="{x:Type DataGridCell}">
                        <Setter Property="Background" Value="{x:Null}" />
                        <Setter Property="BorderBrush" Value="{x:Null}" />
                        <Style.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter Property="Background" Value="{x:Null}" />
                                <Setter Property="Foreground" Value="{x:Static SystemColors.ControlTextBrush}"/>
                                <Setter Property="BorderBrush" Value="{x:Null}" />
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                    <Style TargetType="{x:Type DataGridRow}">
                        <Setter Property="Background" Value="{x:Null}" />
                        <Setter Property="BorderBrush" Value="{x:Null}" />
                        <Style.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter Property="Background" Value="{x:Null}" />
                                <Setter Property="BorderBrush" Value="{x:Null}" />
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </ResourceDictionary>
                <!--<SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="Transparent" />
                <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="Transparent" />
                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextColorKey}" Color="Transparent" />-->
            </DataGrid.Resources>
            <DataGrid.RowStyle>
                <Style TargetType="DataGridRow">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding Level}" Value="TRACE">
                            <Setter Property="Background" Value="#66C678DD"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Level}" Value="DEBUG">
                            <Setter Property="Background" Value="#98C379" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding Level}" Value="INFO">
                            <Setter Property="Background" Value="#61AFEF" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding Level}" Value="WARN">
                            <Setter Property="Background" Value="#D19A66" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding Level}" Value="ERROR">
                            <Setter Property="Background" Value="#E06C75" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding Level}" Value="FATAL">
                            <Setter Property="Background" Value="#E06C75" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </DataGrid.RowStyle>
            <DataGrid.Columns>
                <DataGridTemplateColumn Header="{x:Static m:Messages.Header_Exception}">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <iconPacks:PackIconOcticons
                                HorizontalAlignment="Center"
                                Kind="Check"
                                Visibility="{Binding Exception, Converter={StaticResource TextToVisibilityConverter}}" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTextColumn
                    Width="Auto"
                    Binding="{Binding Time}"
                    Header="{x:Static m:Messages.Header_Time}" />
                <DataGridTextColumn
                    Width="Auto"
                    Binding="{Binding Level}"
                    Header="{x:Static m:Messages.Header_Level}" />
                <DataGridTextColumn
                    Width="Auto"
                    Binding="{Binding ThreadId}"
                    Header="{x:Static m:Messages.Header_ThreadId}"
                    Visibility="{Binding IsChecked, Source={x:Reference IsThreadIdVisible}, Converter={StaticResource BooleanToVisibilityConverter}}" />
                <DataGridTextColumn
                    Width="Auto"
                    Binding="{Binding Logger}"
                    Header="{x:Static m:Messages.Header_Logger}"
                    Visibility="{Binding IsChecked, Source={x:Reference IsLoggerVisible}, Converter={StaticResource BooleanToVisibilityConverter}}" />
                <DataGridTextColumn
                    Width="*"
                    Binding="{Binding Message}"
                    Header="{x:Static m:Messages.Header_Message}" />
            </DataGrid.Columns>
            <DataGrid.RowDetailsTemplate>
                <DataTemplate>
                    <TextBlock Text="{Binding Exception}" Visibility="{Binding Exception, Converter={StaticResource TextToVisibilityConverter}}" />
                </DataTemplate>
            </DataGrid.RowDetailsTemplate>
        </DataGrid>
        <StatusBar Grid.Row="3">
            <StatusBarItem Content="{Binding Status}" />
            <StatusBarItem
                HorizontalAlignment="Right"
                Content="{Binding Version}"
                DockPanel.Dock="Right" />
            <Separator Margin="5,3,5,3" DockPanel.Dock="Right" />
            <StatusBarItem
                HorizontalAlignment="Right"
                Content="{Binding StatusItemsCount}"
                DockPanel.Dock="Right" />
            <Separator Margin="5,3,5,3" DockPanel.Dock="Right" />
            <StatusBarItem HorizontalAlignment="Right" DockPanel.Dock="Right">
                <StatusBarItem.Style>
                    <Style TargetType="StatusBarItem">
                        <Setter Property="Content">
                            <Setter.Value>
                                <iconPacks:PackIconModern
                                    Width="15"
                                    Height="15"
                                    Kind="SortNumericAscending" />
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Settings.IsSortAscending}" Value="False">
                                <Setter Property="Content">
                                    <Setter.Value>
                                        <iconPacks:PackIconModern
                                            Width="15"
                                            Height="15"
                                            Kind="SortNumericDescending" />
                                    </Setter.Value>
                                </Setter>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </StatusBarItem.Style>
            </StatusBarItem>
        </StatusBar>
    </Grid>
</Window>
